// Copyright 2002-2007.  Adobe Systems, Incorporated.  All rights reserved.// Crop and rotate the active document.// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// in case we double clicked the file//app.bringToFront();// debug level: 0-2 (0:disable, 1:break on error, 2:break at beginning)// $.level = 0;// debugger; // launch debugger on next line/*main();function main(){    //declare listFile variable, prompt to browse for text file    var listFile = File.openDialog("Open List File","text(*.txt):*.txt;");     //if no file selected, return    if(listFile == null) return;    //read the selected text file (listFile) to a string(listString)    listFile.open('r') ;     var listString = listFile.read();     listFile.close();     //splitting at line breaks, convert into array of strings    fileList = listString.split('\n');    //iterate array of strings (filenames), open & save as tiff    for(var i=0; i<=fileList.length; i++){        var theFile =new File(fileList[i]);        app.open(theFile);        saveAsTiff(theFile);    }};function saveAsTiff(theFile){    //tiff saving options here}if (!app.documents.length > 0) {    // open sample file if no document is opened.	var strSamplesFolderDirectory = localize( "$$$/LocalizedFilenames.xml/SourceDirectoryName/id/Extras/[LOCALE]/[LOCALE]_Samples/value=Samples" );	var strSampleFileNameLayerComps = localize ("$$$/LocalizedFilenames.xml/SourceFileName/id/Extras/[LOCALE]/[LOCALE]_Samples/Layer_Comps.psd/value=Layer Comps.psd");	var fileName = app.path.toString() + "/" + strSamplesFolderDirectory + "/" + strSampleFileNameLayerComps;		var docRef = open( File(fileName) );}*/var rootDir = "~/Dev/Projects/baby-flashcard-app/media/"main()function main(){    try {                var root = "~/Dev/Projects/baby-flashcard-app/photoshop/workingtest/";        var csvPath = root + "cropping.csv";        var listFile = new File(csvPath);        listFile.open('r') ;         var listString = listFile.read();         listFile.close();         //splitting at line breaks, convert into array of strings        var targets = listString.split('\n');        //iterate array of strings (filenames), open & save as tiff        for(var i=0; i<=targets.length; i++){                        processCsvLine(targets[i]);        }            }    catch(ex){        console.log(ex)    }}function processCsvLine(line){        try {                var vals = line.split(',')        if(vals.length < 8) return                var filePath = rootDir + vals[0];        var file = new File(filePath);        var doc = app.open(file);        var docWidth = (1.0 * app.activeDocument.width).as('px')         var docHeight = (1.0 * app.activeDocument.height).as('px')                 var cropPcs = [ Number(vals[4]) , Number(vals[5]) , Number(vals[6]) ,Number(vals[7]) ]           var bounds = [ docWidth * cropPcs[0],  docHeight * cropPcs[1],  docWidth * cropPcs[2], docHeight * cropPcs[3] ]        //bounds = [Math.floor(bounds[0]), Math.floor(bounds[1]), Math.floor(bounds[2]), Math.floor(bounds[3]) ]         app.preferences.rulerUnits = Units.PIXELS;                doc.crop(bounds)               var targetWidth = Number(vals[2])        var targetHeight = Number(vals[3])        ResizeTheImage (targetWidth, targetHeight)        var newDest = rootDir + vals[1]        var saveFile = new File(newDest, 'w')        SaveJPEG (saveFile, 2)        }    catch(ex) {        console.log(ex)    }        doc.close (SaveOptions.DONOTSAVECHANGES)        }function SaveJPEG(saveFile, jpegQuality) {jpgSaveOptions = new JPEGSaveOptions();jpgSaveOptions.embedColorProfile = true;jpgSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE;jpgSaveOptions.matte = MatteType.NONE;jpgSaveOptions.quality = jpegQuality; //1-12activeDocument.saveAs(saveFile, jpgSaveOptions, true,Extension.LOWERCASE);}function ResizeTheImage(width, height) {	var oldPref = app.preferences.rulerUnits;	var docWidth;	var docHeight;	var docRatio;	var newWidth;	var newHeight;	var resolution = app.activeDocument.resolution;	var limit = false; //sizeInfo.limit;    app.preferences.rulerUnits = Units.PIXELS; // save old preferences	// original width, height	docWidth = (1.0 * app.activeDocument.width * resolution) / 72.0; // decimal inches assuming 72 dpi (used in docRatio)	docHeight = (1.0 * app.activeDocument.height * resolution) / 72.0; // ditto	if (docWidth < 1.0 || docHeight < 1.0)		return true; // error	if (width < 1 || height < 1)		return true; // error	if ( limit && ( app.activeDocument.width.as('px') <= width && app.activeDocument.height.as('px') <= height ) ){		app.preferences.rulerUnits = oldPref; // restore old prefs		isCancelled = false; // if get here, definitely executed		return false; // no error	}	docRatio = docWidth / docHeight; // decimal ratio of original width/height	newWidth = width;	newHeight = ((1.0 * width) / docRatio); // decimal calc	if (newHeight > height) {		newWidth = docRatio * height; // decimal calc		newHeight = height;	}    // resize the image using a good conversion method while keeping the pixel resolution    // and the aspect ratio the same    app.activeDocument.resizeImage(newWidth, newHeight, resolution, ResampleMethod.BICUBIC);    app.preferences.rulerUnits = oldPref; // restore old prefs	isCancelled = false; // if get here, definitely executed	return false; // no error}// crop a 10 pixel border from the image//bounds = new Array(10, 10, app.activeDocument.width - 10, app.activeDocument.height - 10);//app.activeDocument.rotateCanvas(45);//app.activeDocument.crop(bounds);//bounds = null;