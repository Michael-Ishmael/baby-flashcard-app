#target photoshop//var arg = 'originals/domestic/chicken/chicken5.jpg,/Users/michaelishmael/Dev/Projects/baby-flashcard-app/photoshop/playground/chicken5_iphone4.jpg,960,640,0,0,0.885,1'//main([arg])function main(argv){    //var test_val = "abc"    try {        var res = processCsvLine(argv[0]);//  processCsvLine(argv[0]);            return res        //~         var root = "~/Dev/Projects/baby-flashcard-app/photoshop/";//~         var csvPath = root + "cropping.csv";//~         var listFile = new File(csvPath);//~         listFile.open('r') ; //~         var listString = listFile.read(); //~         listFile.close(); //~         //splitting at line breaks, convert into array of strings//~         //test_val = listString;//~         var targets = listString.split('\n');//~         //iterate array of strings (filenames), open & save as tiff//~         for(var i=0; i<=targets.length-2; i++){//~             //console.log(targets[i])//~             test_val = targets[i]//~             processCsvLine(targets[i]);//~             //~         }            }    catch(ex){        console.log(ex)        return ex.message    }}function testFunc(arg){    return arg;} function processCsvLine(line){        try {                   var rootDir = "~/Dev/Projects/baby-flashcard-app/media/";               var vals, doc, docWidth, docHeight;        var err = 0;                try {                                if(line.length == 0) return -1            vals = line.split(',')            if(vals.length < 8) return -2        }        catch(ex) {            err = 1;        }        try {            var filePath = rootDir + vals[0];            var file = new File(filePath);            doc = app.open(file);}                catch(ex) {            err = 2;        }            try {            docWidth = (1.0 * app.activeDocument.width).as('px')             docHeight = (1.0 * app.activeDocument.height).as('px')        }                catch(ex) {            err = 3;        }                         try {            var cropPcs = [ Number(vals[4]) , Number(vals[5]) , Number(vals[6]) ,Number(vals[7]) ]               var bounds = [ docWidth * cropPcs[0],  docHeight * cropPcs[1],  docWidth * cropPcs[2], docHeight * cropPcs[3] ]            //bounds = [Math.floor(bounds[0]), Math.floor(bounds[1]), Math.floor(bounds[2]), Math.floor(bounds[3]) ]             app.preferences.rulerUnits = Units.PIXELS;                    doc.crop(bounds)               }        catch(ex) {            err = 4;        }        try {            var targetWidth = Number(vals[2]);            var targetHeight = Number(vals[3]);            ResizeTheImage (targetWidth, targetHeight);        }                catch(ex) {            err = 5;        }        try {            var newDest = vals[1];            var saveFile = new File(newDest, 'w');            err = SaveJPEG (saveFile, 2);        }        catch(ex) {            err = ex.message;        }            doc.close (SaveOptions.DONOTSAVECHANGES) ;                   }    catch(ex) {        err = ex.message;    }                return err;    }function SaveJPEG(saveFile, jpegQuality) {    try {                    jpgSaveOptions = new JPEGSaveOptions();        jpgSaveOptions.embedColorProfile = true;        jpgSaveOptions.formatOptions = FormatOptions.STANDARDBASELINE;        jpgSaveOptions.matte = MatteType.NONE;        jpgSaveOptions.quality = jpegQuality; //1-12        activeDocument.saveAs(saveFile, jpgSaveOptions, true,Extension.LOWERCASE);                        } catch(ex){        return ex.message;    }        return 0;}function ResizeTheImage(width, height) {	var oldPref = app.preferences.rulerUnits;	var docWidth;	var docHeight;	var docRatio;	var newWidth;	var newHeight;	var resolution = app.activeDocument.resolution;	var limit = false; //sizeInfo.limit;    app.preferences.rulerUnits = Units.PIXELS; // save old preferences	// original width, height	docWidth = (1.0 * app.activeDocument.width * resolution) / 72.0; // decimal inches assuming 72 dpi (used in docRatio)	docHeight = (1.0 * app.activeDocument.height * resolution) / 72.0; // ditto	if (docWidth < 1.0 || docHeight < 1.0)		return true; // error	if (width < 1 || height < 1)		return true; // error	if ( limit && ( app.activeDocument.width.as('px') <= width && app.activeDocument.height.as('px') <= height ) ){		app.preferences.rulerUnits = oldPref; // restore old prefs		isCancelled = false; // if get here, definitely executed		return false; // no error	}	docRatio = docWidth / docHeight; // decimal ratio of original width/height	newWidth = width;	newHeight = ((1.0 * width) / docRatio); // decimal calc	if (newHeight > height) {		newWidth = docRatio * height; // decimal calc		newHeight = height;	}    // resize the image using a good conversion method while keeping the pixel resolution    // and the aspect ratio the same    app.activeDocument.resizeImage(newWidth, newHeight, resolution, ResampleMethod.BICUBIC);    app.preferences.rulerUnits = oldPref; // restore old prefs	isCancelled = false; // if get here, definitely executed	return false; // no error}